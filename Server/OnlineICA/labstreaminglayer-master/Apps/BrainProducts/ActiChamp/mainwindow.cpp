/*#define _CRTDBG_MAP_ALLOC  
#include <stdlib.h>  
#include <crtdbg.h> */ 

#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/xml_parser.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/foreach.hpp>
#include <boost/date_time/posix_time/posix_time.hpp>
#include "Resampler.h"

const double sampling_rates[] = {125,250,500,1000,10000,50000,100000};

const double coeffs_10000_to_125[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.899468e-035,
	-1.957509e-008, -7.843559e-008, -1.766936e-007, -3.143392e-007, -4.912400e-007, -7.071401e-007, -9.616602e-007,
	-1.254298e-006, -1.584427e-006, -1.951300e-006, -2.354046e-006, -2.791676e-006, -3.263080e-006,
	-3.767033e-006, -4.302193e-006, -4.867107e-006, -5.460211e-006, -6.079835e-006, -6.724205e-006,
	-7.391445e-006, -8.079584e-006, -8.786557e-006, -9.510213e-006, -1.024831e-005, -1.099855e-005,
	-1.175852e-005, -1.252577e-005, -1.329777e-005, -1.407196e-005, -1.484568e-005, -1.561627e-005, -1.638100e-005,
	-1.713711e-005, -1.788183e-005, -1.861234e-005, -1.932583e-005, -2.001948e-005, -2.069045e-005,
	-2.133592e-005, -2.195308e-005, -2.253915e-005, -2.309135e-005, -2.360696e-005, -2.408330e-005,
	-2.451771e-005, -2.490762e-005, -2.525050e-005, -2.554390e-005, -2.578543e-005, -2.597280e-005,
	-2.610380e-005, -2.617632e-005, -2.618835e-005, -2.613799e-005, -2.602345e-005, -2.584305e-005, -2.559526e-005,
	-2.527868e-005, -2.489201e-005, -2.443414e-005, -2.390407e-005, -2.330098e-005, -2.262418e-005,
	-2.187315e-005, -2.104754e-005, -2.014716e-005, -1.917198e-005, -1.812216e-005, -1.699802e-005,
	-1.580006e-005, -1.452897e-005, -1.318561e-005, -1.177102e-005, -1.028642e-005, -8.733213e-006,
	-7.112994e-006, -5.427526e-006, -3.678757e-006, -1.868814e-006, 5.325507e-020, 1.925206e-006, 3.904152e-006,
	5.934018e-006, 8.011816e-006, 1.013439e-005, 1.229844e-005, 1.450050e-005, 1.673695e-005,
	1.900404e-005, 2.129787e-005, 2.361441e-005, 2.594950e-005, 2.829887e-005, 3.065812e-005, 3.302276e-005,
	3.538819e-005, 3.774974e-005, 4.010262e-005, 4.244200e-005, 4.476296e-005, 4.706055e-005, 4.932976e-005,
	5.156552e-005, 5.376277e-005, 5.591641e-005, 5.802133e-005, 6.007242e-005, 6.206460e-005,
	6.399278e-005, 6.585194e-005, 6.763708e-005, 6.934326e-005, 7.096558e-005, 7.249927e-005, 7.393958e-005,
	7.528190e-005, 7.652172e-005, 7.765464e-005, 7.867637e-005, 7.958279e-005, 8.036992e-005, 8.103391e-005,
	8.157111e-005, 8.197803e-005, 8.225138e-005, 8.238806e-005, 8.238515e-005, 8.223999e-005,
	8.195011e-005, 8.151327e-005, 8.092749e-005, 8.019100e-005, 7.930232e-005, 7.826020e-005, 7.706367e-005,
	7.571202e-005, 7.420483e-005, 7.254195e-005, 7.072352e-005, 6.874996e-005, 6.662200e-005, 6.434065e-005,
	6.190723e-005, 5.932335e-005, 5.659093e-005, 5.371218e-005, 5.068963e-005, 4.752610e-005,
	4.422472e-005, 4.078892e-005, 3.722240e-005, 3.352921e-005, 2.971365e-005, 2.578031e-005, 2.173409e-005,
	1.758016e-005, 1.332394e-005, 8.971155e-006, 4.527766e-006, -1.139593e-019, -4.605674e-006, -9.282546e-006,
	-1.402368e-005, -1.882191e-005, -2.366988e-005, -2.856001e-005, -3.348454e-005, -3.843555e-005,
	-4.340492e-005, -4.838440e-005, -5.336560e-005, -5.833999e-005, -6.329893e-005, -6.823368e-005,
	-7.313542e-005, -7.799525e-005, -8.280422e-005, -8.755333e-005, -9.223356e-005, -9.683587e-005,
	-1.013513e-004, -1.057707e-004, -1.100852e-004, -1.142859e-004, -1.183640e-004, -1.223106e-004, -1.261172e-004,
	-1.297751e-004, -1.332761e-004, -1.366118e-004, -1.397742e-004, -1.427555e-004, -1.455478e-004,
	-1.481439e-004, -1.505364e-004, -1.527183e-004, -1.546830e-004, -1.564241e-004, -1.579353e-004,
	-1.592109e-004, -1.602453e-004, -1.610335e-004, -1.615706e-004, -1.618522e-004, -1.618741e-004,
	-1.616327e-004, -1.611248e-004, -1.603474e-004, -1.592982e-004, -1.579750e-004, -1.563764e-004, -1.545011e-004,
	-1.523486e-004, -1.499185e-004, -1.472112e-004, -1.442274e-004, -1.409682e-004, -1.374355e-004,
	-1.336312e-004, -1.295582e-004, -1.252194e-004, -1.206187e-004, -1.157601e-004, -1.106481e-004,
	-1.052880e-004, -9.968527e-005, -9.384598e-005, -8.777668e-005, -8.148436e-005, -7.497650e-005,
	-6.826101e-005, -6.134628e-005, -5.424111e-005, -4.695473e-005, -3.949682e-005, -3.187743e-005, -2.410702e-005,
	-1.619645e-005, -8.156920e-006, 1.792589e-019, 8.262406e-006, 1.661807e-005, 2.505446e-005,
	3.355876e-005, 4.211787e-005, 5.071846e-005, 5.934695e-005, 6.798957e-005, 7.663233e-005, 8.526109e-005,
	9.386158e-005, 1.024194e-004, 1.109199e-004, 1.193487e-004, 1.276910e-004, 1.359322e-004,
	1.440575e-004, 1.520524e-004, 1.599021e-004, 1.675921e-004, 1.751079e-004, 1.824353e-004, 1.895599e-004,
	1.964678e-004, 2.031450e-004, 2.095780e-004, 2.157534e-004, 2.216580e-004, 2.272791e-004, 2.326041e-004,
	2.376208e-004, 2.423175e-004, 2.466828e-004, 2.507057e-004, 2.543756e-004, 2.576824e-004,
	2.606165e-004, 2.631688e-004, 2.653307e-004, 2.670942e-004, 2.684517e-004, 2.693965e-004, 2.699220e-004,
	2.700228e-004, 2.696937e-004, 2.689302e-004, 2.677287e-004, 2.660861e-004, 2.640000e-004, 2.614686e-004,
	2.584910e-004, 2.550670e-004, 2.511970e-004, 2.468821e-004, 2.421243e-004, 2.369264e-004,
	2.312916e-004, 2.252242e-004, 2.187291e-004, 2.118120e-004, 2.044793e-004, 1.967381e-004, 1.885964e-004,
	1.800629e-004, 1.711468e-004, 1.618583e-004, 1.522083e-004, 1.422082e-004, 1.318703e-004, 1.212074e-004,
	1.102332e-004, 9.896179e-005, 8.740811e-005, 7.558758e-005, 6.351629e-005, 5.121089e-005,
	3.868856e-005, 2.596705e-005, 1.306462e-005, -2.458534e-019, -1.320761e-005, -2.653857e-005, -3.997285e-005,
	-5.349000e-005, -6.706927e-005, -8.068956e-005, -9.432949e-005, -1.079674e-004, -1.215815e-004,
	-1.351496e-004, -1.486496e-004, -1.620591e-004, -1.753557e-004, -1.885169e-004, -2.015203e-004,
	-2.143433e-004, -2.269635e-004, -2.393587e-004, -2.515065e-004, -2.633850e-004, -2.749724e-004, -2.862471e-004,
	-2.971877e-004, -3.077733e-004, -3.179833e-004, -3.277974e-004, -3.371958e-004, -3.461591e-004,
	-3.546686e-004, -3.627058e-004, -3.702531e-004, -3.772933e-004, -3.838098e-004, -3.897870e-004,
	-3.952096e-004, -4.000633e-004, -4.043343e-004, -4.080100e-004, -4.110782e-004, -4.135279e-004,
	-4.153487e-004, -4.165313e-004, -4.170672e-004, -4.169488e-004, -4.161698e-004, -4.147245e-004, -4.126084e-004,
	-4.098179e-004, -4.063507e-004, -4.022054e-004, -3.973815e-004, -3.918798e-004, -3.857022e-004,
	-3.788516e-004, -3.713321e-004, -3.631487e-004, -3.543077e-004, -3.448165e-004, -3.346836e-004,
	-3.239185e-004, -3.125320e-004, -3.005358e-004, -2.879428e-004, -2.747669e-004, -2.610232e-004,
	-2.467277e-004, -2.318976e-004, -2.165510e-004, -2.007070e-004, -1.843857e-004, -1.676082e-004, -1.503966e-004,
	-1.327736e-004, -1.147633e-004, -9.639005e-005, -7.767949e-005, -5.865784e-005, -3.935211e-005,
	-1.979003e-005, 3.102067e-019, 1.998892e-005, 4.014708e-005, 6.044427e-005, 8.084976e-005,
	1.013323e-004, 1.218604e-004, 1.424018e-004, 1.629244e-004, 1.833954e-004, 2.037820e-004, 2.240510e-004,
	2.441694e-004, 2.641037e-004, 2.838207e-004, 3.032870e-004, 3.224695e-004, 3.413350e-004, 3.598505e-004,
	3.779833e-004, 3.957010e-004, 4.129716e-004, 4.297633e-004, 4.460450e-004, 4.617857e-004,
	4.769554e-004, 4.915245e-004, 5.054640e-004, 5.187458e-004, 5.313423e-004, 5.432270e-004, 5.543740e-004,
	5.647586e-004, 5.743567e-004, 5.831455e-004, 5.911032e-004, 5.982090e-004, 6.044434e-004, 6.097877e-004,
	6.142250e-004, 6.177392e-004, 6.203157e-004, 6.219411e-004, 6.226036e-004, 6.222926e-004,
	6.209989e-004, 6.187149e-004, 6.154344e-004, 6.111527e-004, 6.058668e-004, 5.995749e-004, 5.922771e-004,
	5.839749e-004, 5.746714e-004, 5.643714e-004, 5.530812e-004, 5.408088e-004, 5.275638e-004, 5.133574e-004,
	4.982023e-004, 4.821131e-004, 4.651057e-004, 4.471978e-004, 4.284087e-004, 4.087590e-004,
	3.882711e-004, 3.669689e-004, 3.448777e-004, 3.220245e-004, 2.984375e-004, 2.741464e-004, 2.491824e-004,
	2.235780e-004, 1.973669e-004, 1.705842e-004, 1.432663e-004, 1.154507e-004, 8.717597e-005, 5.848192e-005,
	2.940933e-005, -3.687801e-019, -2.970336e-005, -5.965715e-005, -8.981695e-005, -1.201376e-004,
	-1.505731e-004, -1.810772e-004, -2.116026e-004, -2.421018e-004, -2.725268e-004, -3.028293e-004,
	-3.329606e-004, -3.628719e-004, -3.925142e-004, -4.218384e-004, -4.507954e-004, -4.793363e-004, -5.074123e-004,
	-5.349748e-004, -5.619755e-004, -5.883667e-004, -6.141008e-004, -6.391312e-004, -6.634114e-004,
	-6.868961e-004, -7.095405e-004, -7.313007e-004, -7.521337e-004, -7.719977e-004, -7.908518e-004,
	-8.086562e-004, -8.253725e-004, -8.409635e-004, -8.553935e-004, -8.686279e-004, -8.806341e-004,
	-8.913806e-004, -9.008377e-004, -9.089776e-004, -9.157740e-004, -9.212024e-004, -9.252403e-004, -9.278672e-004,
	-9.290642e-004, -9.288148e-004, -9.271043e-004, -9.239204e-004, -9.192526e-004, -9.130927e-004,
	-9.054349e-004, -8.962755e-004, -8.856129e-004, -8.734481e-004, -8.597843e-004, -8.446270e-004,
	-8.279841e-004, -8.098658e-004, -7.902847e-004, -7.692559e-004, -7.467967e-004, -7.229268e-004,
	-6.976684e-004, -6.710460e-004, -6.430864e-004, -6.138187e-004, -5.832745e-004, -5.514874e-004, -5.184934e-004,
	-4.843308e-004, -4.490401e-004, -4.126637e-004, -3.752464e-004, -3.368349e-004, -2.974780e-004,
	-2.572263e-004, -2.161326e-004, -1.742512e-004, -1.316385e-004, -8.835238e-005, -4.445249e-005,
	4.182708e-019, 4.494239e-005, 9.031056e-005, 1.360391e-004, 1.820612e-004, 2.283091e-004, 2.747138e-004,
	3.212054e-004, 3.677130e-004, 4.141649e-004, 4.604889e-004, 5.066120e-004, 5.524608e-004,
	5.979615e-004, 6.430398e-004, 6.876216e-004, 7.316325e-004, 7.749981e-004, 8.176442e-004, 8.594970e-004,
	9.004827e-004, 9.405285e-004, 9.795617e-004, 1.017511e-003, 1.054304e-003, 1.089873e-003, 1.124147e-003,
	1.157059e-003, 1.188542e-003, 1.218532e-003, 1.246964e-003, 1.273776e-003, 1.298909e-003,
	1.322303e-003, 1.343902e-003, 1.363652e-003, 1.381499e-003, 1.397394e-003, 1.411289e-003, 1.423138e-003,
	1.432898e-003, 1.440529e-003, 1.445993e-003, 1.449255e-003, 1.450283e-003, 1.449049e-003, 1.445525e-003,
	1.439688e-003, 1.431520e-003, 1.421003e-003, 1.408123e-003, 1.392871e-003, 1.375240e-003,
	1.355227e-003, 1.332831e-003, 1.308056e-003, 1.280910e-003, 1.251403e-003, 1.219550e-003, 1.185368e-003,
	1.148880e-003, 1.110110e-003, 1.069088e-003, 1.025846e-003, 9.804196e-004, 9.328497e-004, 8.831794e-004,
	8.314559e-004, 7.777298e-004, 7.220553e-004, 6.644903e-004, 6.050960e-004, 5.439371e-004,
	4.810817e-004, 4.166014e-004, 3.505707e-004, 2.830677e-004, 2.141734e-004, 1.439721e-004, 7.255096e-005,
	-4.558372e-019, -7.358780e-005, -1.481168e-004, -2.234886e-004, -2.996024e-004, -3.763549e-004,
	-4.536404e-004, -5.313512e-004, -6.093772e-004, -6.876064e-004, -7.659252e-004, -8.442179e-004, -9.223675e-004,
	-1.000255e-003, -1.077761e-003, -1.154764e-003, -1.231143e-003, -1.306773e-003, -1.381531e-003,
	-1.455292e-003, -1.527933e-003, -1.599327e-003, -1.669349e-003, -1.737873e-003, -1.804776e-003,
	-1.869930e-003, -1.933213e-003, -1.994501e-003, -2.053670e-003, -2.110599e-003, -2.165166e-003,
	-2.217253e-003, -2.266740e-003, -2.313511e-003, -2.357453e-003, -2.398450e-003, -2.436394e-003, -2.471175e-003,
	-2.502687e-003, -2.530826e-003, -2.555492e-003, -2.576586e-003, -2.594013e-003, -2.607681e-003,
	-2.617501e-003, -2.623387e-003, -2.625259e-003, -2.623037e-003, -2.616647e-003, -2.606018e-003,
	-2.591084e-003, -2.571782e-003, -2.548054e-003, -2.519846e-003, -2.487109e-003, -2.449798e-003,
	-2.407872e-003, -2.361297e-003, -2.310040e-003, -2.254076e-003, -2.193385e-003, -2.127950e-003, -2.057760e-003,
	-1.982810e-003, -1.903098e-003, -1.818630e-003, -1.729415e-003, -1.635468e-003, -1.536809e-003,
	-1.433464e-003, -1.325464e-003, -1.212845e-003, -1.095648e-003, -9.739207e-004, -8.477147e-004,
	-7.170873e-004, -5.821011e-004, -4.428238e-004, -2.993284e-004, -1.516928e-004, 4.792956e-019,
	1.556619e-004, 3.152001e-004, 4.785167e-004, 6.455091e-004, 8.160703e-004, 9.900882e-004, 1.167447e-003,
	1.348025e-003, 1.531698e-003, 1.718337e-003, 1.907809e-003, 2.099975e-003, 2.294697e-003, 2.491828e-003,
	2.691221e-003, 2.892725e-003, 3.096184e-003, 3.301441e-003, 3.508336e-003, 3.716704e-003,
	3.926381e-003, 4.137196e-003, 4.348981e-003, 4.561562e-003, 4.774765e-003, 4.988412e-003, 5.202327e-003,
	5.416331e-003, 5.630242e-003, 5.843880e-003, 6.057063e-003, 6.269608e-003, 6.481332e-003, 6.692052e-003,
	6.901585e-003, 7.109748e-003, 7.316359e-003, 7.521235e-003, 7.724196e-003, 7.925063e-003,
	8.123655e-003, 8.319795e-003, 8.513309e-003, 8.704022e-003, 8.891761e-003, 9.076358e-003, 9.257644e-003,
	9.435455e-003, 9.609629e-003, 9.780007e-003, 9.946432e-003, 1.010875e-002, 1.026682e-002, 1.042048e-002,
	1.056960e-002, 1.071404e-002, 1.085367e-002, 1.098835e-002, 1.111797e-002, 1.124239e-002,
	1.136150e-002, 1.147520e-002, 1.158338e-002, 1.168592e-002, 1.178275e-002, 1.187376e-002, 1.195888e-002,
	1.203802e-002, 1.211110e-002, 1.217806e-002, 1.223884e-002, 1.229337e-002, 1.234161e-002, 1.238352e-002,
	1.241904e-002, 1.244815e-002, 1.247082e-002, 1.248702e-002, 1.249676e-002, 1.250000e-002,
	1.249676e-002, 1.248702e-002, 1.247082e-002, 1.244815e-002, 1.241904e-002, 1.238352e-002, 1.234161e-002,
	1.229337e-002, 1.223884e-002, 1.217806e-002, 1.211110e-002, 1.203802e-002, 1.195888e-002, 1.187376e-002,
	1.178275e-002, 1.168592e-002, 1.158338e-002, 1.147520e-002, 1.136150e-002, 1.124239e-002,
	1.111797e-002, 1.098835e-002, 1.085367e-002, 1.071404e-002, 1.056960e-002, 1.042048e-002, 1.026682e-002,
	1.010875e-002, 9.946432e-003, 9.780007e-003, 9.609629e-003, 9.435455e-003, 9.257644e-003, 9.076358e-003,
	8.891761e-003, 8.704022e-003, 8.513309e-003, 8.319795e-003, 8.123655e-003, 7.925063e-003,
	7.724196e-003, 7.521235e-003, 7.316359e-003, 7.109748e-003, 6.901585e-003, 6.692052e-003, 6.481332e-003,
	6.269608e-003, 6.057063e-003, 5.843880e-003, 5.630242e-003, 5.416331e-003, 5.202327e-003, 4.988412e-003,
	4.774765e-003, 4.561562e-003, 4.348981e-003, 4.137196e-003, 3.926381e-003, 3.716704e-003,
	3.508336e-003, 3.301441e-003, 3.096184e-003, 2.892725e-003, 2.691221e-003, 2.491828e-003, 2.294697e-003,
	2.099975e-003, 1.907809e-003, 1.718337e-003, 1.531698e-003, 1.348025e-003, 1.167447e-003, 9.900882e-004,
	8.160703e-004, 6.455091e-004, 4.785167e-004, 3.152001e-004, 1.556619e-004, 4.792956e-019,
	-1.516928e-004, -2.993284e-004, -4.428238e-004, -5.821011e-004, -7.170873e-004, -8.477147e-004, -9.739207e-004,
	-1.095648e-003, -1.212845e-003, -1.325464e-003, -1.433464e-003, -1.536809e-003, -1.635468e-003,
	-1.729415e-003, -1.818630e-003, -1.903098e-003, -1.982810e-003, -2.057760e-003, -2.127950e-003,
	-2.193385e-003, -2.254076e-003, -2.310040e-003, -2.361297e-003, -2.407872e-003, -2.449798e-003,
	-2.487109e-003, -2.519846e-003, -2.548054e-003, -2.571782e-003, -2.591084e-003, -2.606018e-003, -2.616647e-003,
	-2.623037e-003, -2.625259e-003, -2.623387e-003, -2.617501e-003, -2.607681e-003, -2.594013e-003,
	-2.576586e-003, -2.555492e-003, -2.530826e-003, -2.502687e-003, -2.471175e-003, -2.436394e-003,
	-2.398450e-003, -2.357453e-003, -2.313511e-003, -2.266740e-003, -2.217253e-003, -2.165166e-003,
	-2.110599e-003, -2.053670e-003, -1.994501e-003, -1.933213e-003, -1.869930e-003, -1.804776e-003, -1.737873e-003,
	-1.669349e-003, -1.599327e-003, -1.527933e-003, -1.455292e-003, -1.381531e-003, -1.306773e-003,
	-1.231143e-003, -1.154764e-003, -1.077761e-003, -1.000255e-003, -9.223675e-004, -8.442179e-004,
	-7.659252e-004, -6.876064e-004, -6.093772e-004, -5.313512e-004, -4.536404e-004, -3.763549e-004,
	-2.996024e-004, -2.234886e-004, -1.481168e-004, -7.358780e-005, -4.558372e-019, 7.255096e-005, 1.439721e-004,
	2.141734e-004, 2.830677e-004, 3.505707e-004, 4.166014e-004, 4.810817e-004, 5.439371e-004,
	6.050960e-004, 6.644903e-004, 7.220553e-004, 7.777298e-004, 8.314559e-004, 8.831794e-004, 9.328497e-004,
	9.804196e-004, 1.025846e-003, 1.069088e-003, 1.110110e-003, 1.148880e-003, 1.185368e-003, 1.219550e-003,
	1.251403e-003, 1.280910e-003, 1.308056e-003, 1.332831e-003, 1.355227e-003, 1.375240e-003,
	1.392871e-003, 1.408123e-003, 1.421003e-003, 1.431520e-003, 1.439688e-003, 1.445525e-003, 1.449049e-003,
	1.450283e-003, 1.449255e-003, 1.445993e-003, 1.440529e-003, 1.432898e-003, 1.423138e-003, 1.411289e-003,
	1.397394e-003, 1.381499e-003, 1.363652e-003, 1.343902e-003, 1.322303e-003, 1.298909e-003,
	1.273776e-003, 1.246964e-003, 1.218532e-003, 1.188542e-003, 1.157059e-003, 1.124147e-003, 1.089873e-003,
	1.054304e-003, 1.017511e-003, 9.795617e-004, 9.405285e-004, 9.004827e-004, 8.594970e-004, 8.176442e-004,
	7.749981e-004, 7.316325e-004, 6.876216e-004, 6.430398e-004, 5.979615e-004, 5.524608e-004,
	5.066120e-004, 4.604889e-004, 4.141649e-004, 3.677130e-004, 3.212054e-004, 2.747138e-004, 2.283091e-004,
	1.820612e-004, 1.360391e-004, 9.031056e-005, 4.494239e-005, 4.182708e-019, -4.445249e-005, -8.835238e-005,
	-1.316385e-004, -1.742512e-004, -2.161326e-004, -2.572263e-004, -2.974780e-004, -3.368349e-004,
	-3.752464e-004, -4.126637e-004, -4.490401e-004, -4.843308e-004, -5.184934e-004, -5.514874e-004,
	-5.832745e-004, -6.138187e-004, -6.430864e-004, -6.710460e-004, -6.976684e-004, -7.229268e-004,
	-7.467967e-004, -7.692559e-004, -7.902847e-004, -8.098658e-004, -8.279841e-004, -8.446270e-004, -8.597843e-004,
	-8.734481e-004, -8.856129e-004, -8.962755e-004, -9.054349e-004, -9.130927e-004, -9.192526e-004,
	-9.239204e-004, -9.271043e-004, -9.288148e-004, -9.290642e-004, -9.278672e-004, -9.252403e-004,
	-9.212024e-004, -9.157740e-004, -9.089776e-004, -9.008377e-004, -8.913806e-004, -8.806341e-004,
	-8.686279e-004, -8.553935e-004, -8.409635e-004, -8.253725e-004, -8.086562e-004, -7.908518e-004, -7.719977e-004,
	-7.521337e-004, -7.313007e-004, -7.095405e-004, -6.868961e-004, -6.634114e-004, -6.391312e-004,
	-6.141008e-004, -5.883667e-004, -5.619755e-004, -5.349748e-004, -5.074123e-004, -4.793363e-004,
	-4.507954e-004, -4.218384e-004, -3.925142e-004, -3.628719e-004, -3.329606e-004, -3.028293e-004,
	-2.725268e-004, -2.421018e-004, -2.116026e-004, -1.810772e-004, -1.505731e-004, -1.201376e-004, -8.981695e-005,
	-5.965715e-005, -2.970336e-005, -3.687801e-019, 2.940933e-005, 5.848192e-005, 8.717597e-005,
	1.154507e-004, 1.432663e-004, 1.705842e-004, 1.973669e-004, 2.235780e-004, 2.491824e-004, 2.741464e-004,
	2.984375e-004, 3.220245e-004, 3.448777e-004, 3.669689e-004, 3.882711e-004, 4.087590e-004,
	4.284087e-004, 4.471978e-004, 4.651057e-004, 4.821131e-004, 4.982023e-004, 5.133574e-004, 5.275638e-004,
	5.408088e-004, 5.530812e-004, 5.643714e-004, 5.746714e-004, 5.839749e-004, 5.922771e-004, 5.995749e-004,
	6.058668e-004, 6.111527e-004, 6.154344e-004, 6.187149e-004, 6.209989e-004, 6.222926e-004,
	6.226036e-004, 6.219411e-004, 6.203157e-004, 6.177392e-004, 6.142250e-004, 6.097877e-004, 6.044434e-004,
	5.982090e-004, 5.911032e-004, 5.831455e-004, 5.743567e-004, 5.647586e-004, 5.543740e-004, 5.432270e-004,
	5.313423e-004, 5.187458e-004, 5.054640e-004, 4.915245e-004, 4.769554e-004, 4.617857e-004,
	4.460450e-004, 4.297633e-004, 4.129716e-004, 3.957010e-004, 3.779833e-004, 3.598505e-004, 3.413350e-004,
	3.224695e-004, 3.032870e-004, 2.838207e-004, 2.641037e-004, 2.441694e-004, 2.240510e-004, 2.037820e-004,
	1.833954e-004, 1.629244e-004, 1.424018e-004, 1.218604e-004, 1.013323e-004, 8.084976e-005,
	6.044427e-005, 4.014708e-005, 1.998892e-005, 3.102067e-019, -1.979003e-005, -3.935211e-005, -5.865784e-005,
	-7.767949e-005, -9.639005e-005, -1.147633e-004, -1.327736e-004, -1.503966e-004, -1.676082e-004,
	-1.843857e-004, -2.007070e-004, -2.165510e-004, -2.318976e-004, -2.467277e-004, -2.610232e-004,
	-2.747669e-004, -2.879428e-004, -3.005358e-004, -3.125320e-004, -3.239185e-004, -3.346836e-004, -3.448165e-004,
	-3.543077e-004, -3.631487e-004, -3.713321e-004, -3.788516e-004, -3.857022e-004, -3.918798e-004,
	-3.973815e-004, -4.022054e-004, -4.063507e-004, -4.098179e-004, -4.126084e-004, -4.147245e-004,
	-4.161698e-004, -4.169488e-004, -4.170672e-004, -4.165313e-004, -4.153487e-004, -4.135279e-004,
	-4.110782e-004, -4.080100e-004, -4.043343e-004, -4.000633e-004, -3.952096e-004, -3.897870e-004, -3.838098e-004,
	-3.772933e-004, -3.702531e-004, -3.627058e-004, -3.546686e-004, -3.461591e-004, -3.371958e-004,
	-3.277974e-004, -3.179833e-004, -3.077733e-004, -2.971877e-004, -2.862471e-004, -2.749724e-004,
	-2.633850e-004, -2.515065e-004, -2.393587e-004, -2.269635e-004, -2.143433e-004, -2.015203e-004,
	-1.885169e-004, -1.753557e-004, -1.620591e-004, -1.486496e-004, -1.351496e-004, -1.215815e-004, -1.079674e-004,
	-9.432949e-005, -8.068956e-005, -6.706927e-005, -5.349000e-005, -3.997285e-005, -2.653857e-005,
	-1.320761e-005, -2.458534e-019, 1.306462e-005, 2.596705e-005, 3.868856e-005, 5.121089e-005,
	6.351629e-005, 7.558758e-005, 8.740811e-005, 9.896179e-005, 1.102332e-004, 1.212074e-004, 1.318703e-004,
	1.422082e-004, 1.522083e-004, 1.618583e-004, 1.711468e-004, 1.800629e-004, 1.885964e-004, 1.967381e-004,
	2.044793e-004, 2.118120e-004, 2.187291e-004, 2.252242e-004, 2.312916e-004, 2.369264e-004,
	2.421243e-004, 2.468821e-004, 2.511970e-004, 2.550670e-004, 2.584910e-004, 2.614686e-004, 2.640000e-004,
	2.660861e-004, 2.677287e-004, 2.689302e-004, 2.696937e-004, 2.700228e-004, 2.699220e-004, 2.693965e-004,
	2.684517e-004, 2.670942e-004, 2.653307e-004, 2.631688e-004, 2.606165e-004, 2.576824e-004,
	2.543756e-004, 2.507057e-004, 2.466828e-004, 2.423175e-004, 2.376208e-004, 2.326041e-004, 2.272791e-004,
	2.216580e-004, 2.157534e-004, 2.095780e-004, 2.031450e-004, 1.964678e-004, 1.895599e-004, 1.824353e-004,
	1.751079e-004, 1.675921e-004, 1.599021e-004, 1.520524e-004, 1.440575e-004, 1.359322e-004,
	1.276910e-004, 1.193487e-004, 1.109199e-004, 1.024194e-004, 9.386158e-005, 8.526109e-005, 7.663233e-005,
	6.798957e-005, 5.934695e-005, 5.071846e-005, 4.211787e-005, 3.355876e-005, 2.505446e-005, 1.661807e-005,
	8.262406e-006, 1.792589e-019, -8.156920e-006, -1.619645e-005, -2.410702e-005, -3.187743e-005,
	-3.949682e-005, -4.695473e-005, -5.424111e-005, -6.134628e-005, -6.826101e-005, -7.497650e-005,
	-8.148436e-005, -8.777668e-005, -9.384598e-005, -9.968527e-005, -1.052880e-004, -1.106481e-004, -1.157601e-004,
	-1.206187e-004, -1.252194e-004, -1.295582e-004, -1.336312e-004, -1.374355e-004, -1.409682e-004,
	-1.442274e-004, -1.472112e-004, -1.499185e-004, -1.523486e-004, -1.545011e-004, -1.563764e-004,
	-1.579750e-004, -1.592982e-004, -1.603474e-004, -1.611248e-004, -1.616327e-004, -1.618741e-004,
	-1.618522e-004, -1.615706e-004, -1.610335e-004, -1.602453e-004, -1.592109e-004, -1.579353e-004, -1.564241e-004,
	-1.546830e-004, -1.527183e-004, -1.505364e-004, -1.481439e-004, -1.455478e-004, -1.427555e-004,
	-1.397742e-004, -1.366118e-004, -1.332761e-004, -1.297751e-004, -1.261172e-004, -1.223106e-004,
	-1.183640e-004, -1.142859e-004, -1.100852e-004, -1.057707e-004, -1.013513e-004, -9.683587e-005,
	-9.223356e-005, -8.755333e-005, -8.280422e-005, -7.799525e-005, -7.313542e-005, -6.823368e-005, -6.329893e-005,
	-5.833999e-005, -5.336560e-005, -4.838440e-005, -4.340492e-005, -3.843555e-005, -3.348454e-005,
	-2.856001e-005, -2.366988e-005, -1.882191e-005, -1.402368e-005, -9.282546e-006, -4.605674e-006,
	-1.139593e-019, 4.527766e-006, 8.971155e-006, 1.332394e-005, 1.758016e-005, 2.173409e-005, 2.578031e-005,
	2.971365e-005, 3.352921e-005, 3.722240e-005, 4.078892e-005, 4.422472e-005, 4.752610e-005,
	5.068963e-005, 5.371218e-005, 5.659093e-005, 5.932335e-005, 6.190723e-005, 6.434065e-005, 6.662200e-005,
	6.874996e-005, 7.072352e-005, 7.254195e-005, 7.420483e-005, 7.571202e-005, 7.706367e-005, 7.826020e-005,
	7.930232e-005, 8.019100e-005, 8.092749e-005, 8.151327e-005, 8.195011e-005, 8.223999e-005,
	8.238515e-005, 8.238806e-005, 8.225138e-005, 8.197803e-005, 8.157111e-005, 8.103391e-005, 8.036992e-005,
	7.958279e-005, 7.867637e-005, 7.765464e-005, 7.652172e-005, 7.528190e-005, 7.393958e-005, 7.249927e-005,
	7.096558e-005, 6.934326e-005, 6.763708e-005, 6.585194e-005, 6.399278e-005, 6.206460e-005,
	6.007242e-005, 5.802133e-005, 5.591641e-005, 5.376277e-005, 5.156552e-005, 4.932976e-005, 4.706055e-005,
	4.476296e-005, 4.244200e-005, 4.010262e-005, 3.774974e-005, 3.538819e-005, 3.302276e-005, 3.065812e-005,
	2.829887e-005, 2.594950e-005, 2.361441e-005, 2.129787e-005, 1.900404e-005, 1.673695e-005,
	1.450050e-005, 1.229844e-005, 1.013439e-005, 8.011816e-006, 5.934018e-006, 3.904152e-006, 1.925206e-006,
	5.325507e-020, -1.868814e-006, -3.678757e-006, -5.427526e-006, -7.112994e-006, -8.733213e-006,
	-1.028642e-005, -1.177102e-005, -1.318561e-005, -1.452897e-005, -1.580006e-005, -1.699802e-005, -1.812216e-005,
	-1.917198e-005, -2.014716e-005, -2.104754e-005, -2.187315e-005, -2.262418e-005, -2.330098e-005,
	-2.390407e-005, -2.443414e-005, -2.489201e-005, -2.527868e-005, -2.559526e-005, -2.584305e-005,
	-2.602345e-005, -2.613799e-005, -2.618835e-005, -2.617632e-005, -2.610380e-005, -2.597280e-005,
	-2.578543e-005, -2.554390e-005, -2.525050e-005, -2.490762e-005, -2.451771e-005, -2.408330e-005, -2.360696e-005,
	-2.309135e-005, -2.253915e-005, -2.195308e-005, -2.133592e-005, -2.069045e-005, -2.001948e-005,
	-1.932583e-005, -1.861234e-005, -1.788183e-005, -1.713711e-005, -1.638100e-005, -1.561627e-005,
	-1.484568e-005, -1.407196e-005, -1.329777e-005, -1.252577e-005, -1.175852e-005, -1.099855e-005,
	-1.024831e-005, -9.510213e-006, -8.786557e-006, -8.079584e-006, -7.391445e-006, -6.724205e-006, -6.079835e-006,
	-5.460211e-006, -4.867107e-006, -4.302193e-006, -3.767033e-006, -3.263080e-006, -2.791676e-006,
	-2.354046e-006, -1.951300e-006, -1.584427e-006, -1.254298e-006, -9.616602e-007, -7.071401e-007,
	-4.912400e-007, -3.143392e-007, -1.766936e-007, -7.843559e-008, -1.957509e-008, -1.899468e-035};

const double coeffs_10000_to_250[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.798936e-035, -1.568712e-007, -6.286784e-007,
	-1.414280e-006, -2.508596e-006, -3.902599e-006, -5.583351e-006, -7.534065e-006, -9.734214e-006,
	-1.215967e-005, -1.478289e-005, -1.757311e-005, -2.049663e-005, -2.351703e-005, -2.659555e-005,
	-2.969137e-005, -3.276200e-005, -3.576365e-005, -3.865167e-005, -4.138090e-005, -4.390616e-005,
	-4.618270e-005, -4.816660e-005, -4.981524e-005, -5.108780e-005, -5.194560e-005, -5.235265e-005, -5.227598e-005,
	-5.168610e-005, -5.055735e-005, -4.886828e-005, -4.660196e-005, -4.374631e-005, -4.029432e-005,
	-3.624431e-005, -3.160012e-005, -2.637122e-005, -2.057283e-005, -1.422599e-005, -7.357515e-006,
	1.065101e-019, 7.808305e-006, 1.602363e-005, 2.459689e-005, 3.347391e-005, 4.259574e-005, 5.189900e-005,
	6.131624e-005, 7.077639e-005, 8.020523e-005, 8.952593e-005, 9.865952e-005, 1.075255e-004,
	1.160427e-004, 1.241292e-004, 1.317039e-004, 1.386865e-004, 1.449985e-004, 1.505638e-004, 1.553093e-004,
	1.591656e-004, 1.620678e-004, 1.639561e-004, 1.647761e-004, 1.644800e-004, 1.630265e-004, 1.603820e-004,
	1.565204e-004, 1.514240e-004, 1.450839e-004, 1.374999e-004, 1.286813e-004, 1.186467e-004,
	1.074244e-004, 9.505221e-005, 8.157783e-005, 6.705842e-005, 5.156062e-005, 3.516031e-005, 1.794231e-005,
	-2.279186e-019, -1.856509e-005, -3.764383e-005, -5.712002e-005, -7.687109e-005, -9.676880e-005,
	-1.166800e-004, -1.364674e-004, -1.559905e-004, -1.751067e-004, -1.936717e-004, -2.115414e-004, -2.285719e-004,
	-2.446212e-004, -2.595502e-004, -2.732236e-004, -2.855109e-004, -2.962878e-004, -3.054366e-004,
	-3.128481e-004, -3.184218e-004, -3.220671e-004, -3.237043e-004, -3.232654e-004, -3.206949e-004,
	-3.159500e-004, -3.090022e-004, -2.998371e-004, -2.884548e-004, -2.748709e-004, -2.591163e-004,
	-2.412374e-004, -2.212963e-004, -1.993705e-004, -1.755534e-004, -1.499530e-004, -1.226926e-004, -9.390946e-005,
	-6.375485e-005, -3.239290e-005, 3.585178e-019, 3.323614e-005, 6.711752e-005, 1.014369e-004,
	1.359791e-004, 1.705222e-004, 2.048387e-004, 2.386974e-004, 2.718644e-004, 3.041047e-004, 3.351842e-004,
	3.648706e-004, 3.929355e-004, 4.191560e-004, 4.433160e-004, 4.652081e-004, 4.846351e-004,
	5.014114e-004, 5.153647e-004, 5.263376e-004, 5.341884e-004, 5.387929e-004, 5.400456e-004, 5.378605e-004,
	5.321722e-004, 5.229372e-004, 5.101340e-004, 4.937642e-004, 4.738527e-004, 4.504484e-004, 4.236240e-004,
	3.934762e-004, 3.601257e-004, 3.237166e-004, 2.844164e-004, 2.424148e-004, 1.979236e-004,
	1.511752e-004, 1.024218e-004, 5.193411e-005, -4.917068e-019, -5.307715e-005, -1.069800e-004, -1.613791e-004,
	-2.159348e-004, -2.702992e-004, -3.241182e-004, -3.770338e-004, -4.286866e-004, -4.787173e-004,
	-5.267701e-004, -5.724942e-004, -6.155467e-004, -6.555948e-004, -6.923182e-004, -7.254116e-004,
	-7.545865e-004, -7.795740e-004, -8.001265e-004, -8.160200e-004, -8.270558e-004, -8.330625e-004, -8.338977e-004,
	-8.294489e-004, -8.196359e-004, -8.044107e-004, -7.837597e-004, -7.577033e-004, -7.262974e-004,
	-6.896331e-004, -6.478371e-004, -6.010716e-004, -5.495338e-004, -4.934555e-004, -4.331020e-004,
	-3.687714e-004, -3.007931e-004, -2.295265e-004, -1.553590e-004, -7.870422e-005, 6.204133e-019,
	8.029417e-005, 1.616995e-004, 2.437207e-004, 3.258488e-004, 4.075639e-004, 4.883387e-004, 5.676414e-004,
	6.449390e-004, 7.197009e-004, 7.914021e-004, 8.595267e-004, 9.235714e-004, 9.830490e-004, 1.037492e-003,
	1.086454e-003, 1.129517e-003, 1.166291e-003, 1.196418e-003, 1.219575e-003, 1.235478e-003,
	1.243882e-003, 1.244585e-003, 1.237430e-003, 1.222305e-003, 1.199150e-003, 1.167950e-003, 1.128743e-003,
	1.081618e-003, 1.026715e-003, 9.642262e-004, 8.943957e-004, 8.175179e-004, 7.339378e-004, 6.440490e-004,
	5.482928e-004, 4.471559e-004, 3.411684e-004, 2.309014e-004, 1.169638e-004, -7.375602e-019,
	-1.193143e-004, -2.402751e-004, -3.621543e-004, -4.842036e-004, -6.056587e-004, -7.257439e-004, -8.436767e-004,
	-9.586726e-004, -1.069950e-003, -1.176733e-003, -1.278262e-003, -1.373792e-003, -1.462601e-003,
	-1.543995e-003, -1.617312e-003, -1.681927e-003, -1.737256e-003, -1.782761e-003, -1.817955e-003,
	-1.842405e-003, -1.855734e-003, -1.857630e-003, -1.847841e-003, -1.826185e-003, -1.792551e-003,
	-1.746896e-003, -1.689254e-003, -1.619732e-003, -1.538512e-003, -1.445854e-003, -1.342092e-003, -1.227637e-003,
	-1.102975e-003, -9.686617e-004, -8.253274e-004, -6.736698e-004, -5.144526e-004, -3.485024e-004,
	-1.767048e-004, 8.365415e-019, 1.806211e-004, 3.641224e-004, 5.494276e-004, 7.354259e-004,
	9.209779e-004, 1.104922e-003, 1.286080e-003, 1.463265e-003, 1.635288e-003, 1.800965e-003, 1.959123e-003,
	2.108609e-003, 2.248293e-003, 2.377084e-003, 2.493928e-003, 2.597818e-003, 2.687805e-003, 2.762999e-003,
	2.822578e-003, 2.865796e-003, 2.891986e-003, 2.900567e-003, 2.891049e-003, 2.863040e-003,
	2.816247e-003, 2.750480e-003, 2.665661e-003, 2.561820e-003, 2.439100e-003, 2.297760e-003, 2.138176e-003,
	1.960839e-003, 1.766359e-003, 1.555460e-003, 1.328981e-003, 1.087874e-003, 8.332027e-004, 5.661354e-004,
	2.879443e-004, -9.116745e-019, -2.962335e-004, -5.992048e-004, -9.072809e-004, -1.218754e-003,
	-1.531850e-003, -1.844735e-003, -2.155523e-003, -2.462285e-003, -2.763062e-003, -3.055866e-003,
	-3.338697e-003, -3.609551e-003, -3.866427e-003, -4.107340e-003, -4.330332e-003, -4.533480e-003, -4.714905e-003,
	-4.872788e-003, -5.005374e-003, -5.110984e-003, -5.188026e-003, -5.235002e-003, -5.250518e-003,
	-5.233293e-003, -5.182167e-003, -5.096108e-003, -4.974219e-003, -4.815745e-003, -4.620080e-003,
	-4.386770e-003, -4.115521e-003, -3.806197e-003, -3.458830e-003, -3.073618e-003, -2.650928e-003,
	-2.191296e-003, -1.695429e-003, -1.164202e-003, -5.986568e-004, 9.585913e-019, 6.304002e-004, 1.291018e-003,
	1.980176e-003, 2.696050e-003, 3.436674e-003, 4.199951e-003, 4.983656e-003, 5.785449e-003,
	6.602882e-003, 7.433408e-003, 8.274393e-003, 9.123124e-003, 9.976825e-003, 1.083266e-002, 1.168776e-002,
	1.253922e-002, 1.338410e-002, 1.421950e-002, 1.504247e-002, 1.585013e-002, 1.663959e-002, 1.740804e-002,
	1.815272e-002, 1.887091e-002, 1.956001e-002, 2.021750e-002, 2.084096e-002, 2.142809e-002,
	2.197670e-002, 2.248478e-002, 2.295040e-002, 2.337185e-002, 2.374753e-002, 2.407603e-002, 2.435612e-002,
	2.458675e-002, 2.476703e-002, 2.489629e-002, 2.497405e-002, 2.500000e-002, 2.497405e-002, 2.489629e-002,
	2.476703e-002, 2.458675e-002, 2.435612e-002, 2.407603e-002, 2.374753e-002, 2.337185e-002,
	2.295040e-002, 2.248478e-002, 2.197670e-002, 2.142809e-002, 2.084096e-002, 2.021750e-002, 1.956001e-002,
	1.887091e-002, 1.815272e-002, 1.740804e-002, 1.663959e-002, 1.585013e-002, 1.504247e-002, 1.421950e-002,
	1.338410e-002, 1.253922e-002, 1.168776e-002, 1.083266e-002, 9.976825e-003, 9.123124e-003,
	8.274393e-003, 7.433408e-003, 6.602882e-003, 5.785449e-003, 4.983656e-003, 4.199951e-003, 3.436674e-003,
	2.696050e-003, 1.980176e-003, 1.291018e-003, 6.304002e-004, 9.585913e-019, -5.986568e-004, -1.164202e-003,
	-1.695429e-003, -2.191296e-003, -2.650928e-003, -3.073618e-003, -3.458830e-003, -3.806197e-003,
	-4.115521e-003, -4.386770e-003, -4.620080e-003, -4.815745e-003, -4.974219e-003, -5.096108e-003,
	-5.182167e-003, -5.233293e-003, -5.250518e-003, -5.235002e-003, -5.188026e-003, -5.110984e-003,
	-5.005374e-003, -4.872788e-003, -4.714905e-003, -4.533480e-003, -4.330332e-003, -4.107340e-003, -3.866427e-003,
	-3.609551e-003, -3.338697e-003, -3.055866e-003, -2.763062e-003, -2.462285e-003, -2.155523e-003,
	-1.844735e-003, -1.531850e-003, -1.218754e-003, -9.072809e-004, -5.992048e-004, -2.962335e-004,
	-9.116745e-019, 2.879443e-004, 5.661354e-004, 8.332027e-004, 1.087874e-003, 1.328981e-003, 1.555460e-003,
	1.766359e-003, 1.960839e-003, 2.138176e-003, 2.297760e-003, 2.439100e-003, 2.561820e-003,
	2.665661e-003, 2.750480e-003, 2.816247e-003, 2.863040e-003, 2.891049e-003, 2.900567e-003, 2.891986e-003,
	2.865796e-003, 2.822578e-003, 2.762999e-003, 2.687805e-003, 2.597818e-003, 2.493928e-003, 2.377084e-003,
	2.248293e-003, 2.108609e-003, 1.959123e-003, 1.800965e-003, 1.635288e-003, 1.463265e-003,
	1.286080e-003, 1.104922e-003, 9.209779e-004, 7.354259e-004, 5.494276e-004, 3.641224e-004, 1.806211e-004,
	8.365415e-019, -1.767048e-004, -3.485024e-004, -5.144526e-004, -6.736698e-004, -8.253274e-004,
	-9.686617e-004, -1.102975e-003, -1.227637e-003, -1.342092e-003, -1.445854e-003, -1.538512e-003, -1.619732e-003,
	-1.689254e-003, -1.746896e-003, -1.792551e-003, -1.826185e-003, -1.847841e-003, -1.857630e-003,
	-1.855734e-003, -1.842405e-003, -1.817955e-003, -1.782761e-003, -1.737256e-003, -1.681927e-003,
	-1.617312e-003, -1.543995e-003, -1.462601e-003, -1.373792e-003, -1.278262e-003, -1.176733e-003,
	-1.069950e-003, -9.586726e-004, -8.436767e-004, -7.257439e-004, -6.056587e-004, -4.842036e-004, -3.621543e-004,
	-2.402751e-004, -1.193143e-004, -7.375602e-019, 1.169638e-004, 2.309014e-004, 3.411684e-004,
	4.471559e-004, 5.482928e-004, 6.440490e-004, 7.339378e-004, 8.175179e-004, 8.943957e-004, 9.642262e-004,
	1.026715e-003, 1.081618e-003, 1.128743e-003, 1.167950e-003, 1.199150e-003, 1.222305e-003,
	1.237430e-003, 1.244585e-003, 1.243882e-003, 1.235478e-003, 1.219575e-003, 1.196418e-003, 1.166291e-003,
	1.129517e-003, 1.086454e-003, 1.037492e-003, 9.830490e-004, 9.235714e-004, 8.595267e-004, 7.914021e-004,
	7.197009e-004, 6.449390e-004, 5.676414e-004, 4.883387e-004, 4.075639e-004, 3.258488e-004,
	2.437207e-004, 1.616995e-004, 8.029417e-005, 6.204133e-019, -7.870422e-005, -1.553590e-004, -2.295265e-004,
	-3.007931e-004, -3.687714e-004, -4.331020e-004, -4.934555e-004, -5.495338e-004, -6.010716e-004,
	-6.478371e-004, -6.896331e-004, -7.262974e-004, -7.577033e-004, -7.837597e-004, -8.044107e-004,
	-8.196359e-004, -8.294489e-004, -8.338977e-004, -8.330625e-004, -8.270558e-004, -8.160200e-004, -8.001265e-004,
	-7.795740e-004, -7.545865e-004, -7.254116e-004, -6.923182e-004, -6.555948e-004, -6.155467e-004,
	-5.724942e-004, -5.267701e-004, -4.787173e-004, -4.286866e-004, -3.770338e-004, -3.241182e-004,
	-2.702992e-004, -2.159348e-004, -1.613791e-004, -1.069800e-004, -5.307715e-005, -4.917068e-019,
	5.193411e-005, 1.024218e-004, 1.511752e-004, 1.979236e-004, 2.424148e-004, 2.844164e-004, 3.237166e-004,
	3.601257e-004, 3.934762e-004, 4.236240e-004, 4.504484e-004, 4.738527e-004, 4.937642e-004, 5.101340e-004,
	5.229372e-004, 5.321722e-004, 5.378605e-004, 5.400456e-004, 5.387929e-004, 5.341884e-004,
	5.263376e-004, 5.153647e-004, 5.014114e-004, 4.846351e-004, 4.652081e-004, 4.433160e-004, 4.191560e-004,
	3.929355e-004, 3.648706e-004, 3.351842e-004, 3.041047e-004, 2.718644e-004, 2.386974e-004, 2.048387e-004,
	1.705222e-004, 1.359791e-004, 1.014369e-004, 6.711752e-005, 3.323614e-005, 3.585178e-019,
	-3.239290e-005, -6.375485e-005, -9.390946e-005, -1.226926e-004, -1.499530e-004, -1.755534e-004, -1.993705e-004,
	-2.212963e-004, -2.412374e-004, -2.591163e-004, -2.748709e-004, -2.884548e-004, -2.998371e-004,
	-3.090022e-004, -3.159500e-004, -3.206949e-004, -3.232654e-004, -3.237043e-004, -3.220671e-004,
	-3.184218e-004, -3.128481e-004, -3.054366e-004, -2.962878e-004, -2.855109e-004, -2.732236e-004,
	-2.595502e-004, -2.446212e-004, -2.285719e-004, -2.115414e-004, -1.936717e-004, -1.751067e-004, -1.559905e-004,
	-1.364674e-004, -1.166800e-004, -9.676880e-005, -7.687109e-005, -5.712002e-005, -3.764383e-005,
	-1.856509e-005, -2.279186e-019, 1.794231e-005, 3.516031e-005, 5.156062e-005, 6.705842e-005,
	8.157783e-005, 9.505221e-005, 1.074244e-004, 1.186467e-004, 1.286813e-004, 1.374999e-004, 1.450839e-004,
	1.514240e-004, 1.565204e-004, 1.603820e-004, 1.630265e-004, 1.644800e-004, 1.647761e-004, 1.639561e-004,
	1.620678e-004, 1.591656e-004, 1.553093e-004, 1.505638e-004, 1.449985e-004, 1.386865e-004,
	1.317039e-004, 1.241292e-004, 1.160427e-004, 1.075255e-004, 9.865952e-005, 8.952593e-005, 8.020523e-005,
	7.077639e-005, 6.131624e-005, 5.189900e-005, 4.259574e-005, 3.347391e-005, 2.459689e-005, 1.602363e-005,
	7.808305e-006, 1.065101e-019, -7.357515e-006, -1.422599e-005, -2.057283e-005, -2.637122e-005,
	-3.160012e-005, -3.624431e-005, -4.029432e-005, -4.374631e-005, -4.660196e-005, -4.886828e-005,
	-5.055735e-005, -5.168610e-005, -5.227598e-005, -5.235265e-005, -5.194560e-005, -5.108780e-005, -4.981524e-005,
	-4.816660e-005, -4.618270e-005, -4.390616e-005, -4.138090e-005, -3.865167e-005, -3.576365e-005,
	-3.276200e-005, -2.969137e-005, -2.659555e-005, -2.351703e-005, -2.049663e-005, -1.757311e-005,
	-1.478289e-005, -1.215967e-005, -9.734214e-006, -7.534065e-006, -5.583351e-006, -3.902599e-006,
	-2.508596e-006, -1.414280e-006, -6.286784e-007, -1.568712e-007, -3.798936e-035};

const double coeffs_10000_to_500[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-7.597872e-035, -1.257357e-006, -5.017191e-006, -1.116670e-005, -1.946843e-005, -2.956578e-005,
	-4.099326e-005, -5.319110e-005, -6.552399e-005, -7.730334e-005, -8.781233e-005, -9.633319e-005, -1.021756e-004,
	-1.047053e-004, -1.033722e-004, -9.773656e-005, -8.749262e-005, -7.248863e-005, -5.274244e-005,
	-2.845198e-005, 2.130203e-019, 3.204726e-005, 6.694782e-005, 1.037980e-004, 1.415528e-004,
	1.790519e-004, 2.150511e-004, 2.482584e-004, 2.773730e-004, 3.011276e-004, 3.183312e-004, 3.279121e-004,
	3.289600e-004, 3.207640e-004, 3.028481e-004, 2.749999e-004, 2.372934e-004, 1.901044e-004, 1.341168e-004,
	7.032063e-005, -4.558372e-019, -7.528765e-005, -1.537422e-004, -2.333599e-004, -3.119810e-004,
	-3.873435e-004, -4.571437e-004, -5.191005e-004, -5.710219e-004, -6.108732e-004, -6.368435e-004,
	-6.474086e-004, -6.413897e-004, -6.180045e-004, -5.769096e-004, -5.182326e-004, -4.425925e-004, -3.511067e-004,
	-2.453851e-004, -1.275097e-004, 7.170356e-019, 1.342350e-004, 2.719583e-004, 4.096775e-004,
	5.437287e-004, 6.703684e-004, 7.858711e-004, 8.866321e-004, 9.692701e-004, 1.030729e-003, 1.068377e-003,
	1.080091e-003, 1.064344e-003, 1.020268e-003, 9.477055e-004, 8.472480e-004, 7.202514e-004,
	5.688328e-004, 3.958472e-004, 2.048435e-004, -9.834135e-019, -2.139600e-004, -4.318696e-004, -6.482363e-004,
	-8.573731e-004, -1.053540e-003, -1.231093e-003, -1.384636e-003, -1.509173e-003, -1.600253e-003,
	-1.654112e-003, -1.667795e-003, -1.639272e-003, -1.567519e-003, -1.452595e-003, -1.295674e-003,
	-1.099068e-003, -8.662040e-004, -6.015863e-004, -3.107180e-004, 1.240827e-018, 3.233990e-004, 6.516976e-004,
	9.766774e-004, 1.289878e-003, 1.582804e-003, 1.847143e-003, 2.074983e-003, 2.259034e-003,
	2.392836e-003, 2.470957e-003, 2.489170e-003, 2.444611e-003, 2.335899e-003, 2.163235e-003, 1.928452e-003,
	1.635036e-003, 1.288098e-003, 8.943118e-004, 4.618027e-004, -1.475120e-018, -4.805503e-004, -9.684072e-004,
	-1.451488e-003, -1.917345e-003, -2.353467e-003, -2.747584e-003, -3.087991e-003, -3.363854e-003,
	-3.565522e-003, -3.684810e-003, -3.715259e-003, -3.652371e-003, -3.493793e-003, -3.239463e-003,
	-2.891707e-003, -2.455275e-003, -1.937323e-003, -1.347340e-003, -6.970049e-004, 1.673083e-018,
	7.282449e-004, 1.470852e-003, 2.209843e-003, 2.926530e-003, 3.601931e-003, 4.217217e-003, 4.754168e-003,
	5.195636e-003, 5.525997e-003, 5.731592e-003, 5.801133e-003, 5.726080e-003, 5.500961e-003, 5.123639e-003,
	4.595520e-003, 3.921678e-003, 3.110919e-003, 2.175748e-003, 1.132271e-003, -1.823349e-018,
	-1.198410e-003, -2.437509e-003, -3.689470e-003, -4.924571e-003, -6.111731e-003, -7.219102e-003, -8.214681e-003,
	-9.066959e-003, -9.745576e-003, -1.022197e-002, -1.047000e-002, -1.046659e-002, -1.019222e-002,
	-9.631490e-003, -8.773541e-003, -7.612394e-003, -6.147236e-003, -4.382592e-003, -2.328404e-003,
	1.917183e-018, 2.582037e-003, 5.392100e-003, 8.399902e-003, 1.157090e-002, 1.486682e-002, 1.824625e-002,
	2.166532e-002, 2.507843e-002, 2.843899e-002, 3.170025e-002, 3.481609e-002, 3.774182e-002,
	4.043500e-002, 4.285617e-002, 4.496955e-002, 4.674369e-002, 4.815206e-002, 4.917349e-002, 4.979259e-002,
	5.000000e-002, 4.979259e-002, 4.917349e-002, 4.815206e-002, 4.674369e-002, 4.496955e-002, 4.285617e-002,
	4.043500e-002, 3.774182e-002, 3.481609e-002, 3.170025e-002, 2.843899e-002, 2.507843e-002,
	2.166532e-002, 1.824625e-002, 1.486682e-002, 1.157090e-002, 8.399902e-003, 5.392100e-003, 2.582037e-003,
	1.917183e-018, -2.328404e-003, -4.382592e-003, -6.147236e-003, -7.612394e-003, -8.773541e-003,
	-9.631490e-003, -1.019222e-002, -1.046659e-002, -1.047000e-002, -1.022197e-002, -9.745576e-003, -9.066959e-003,
	-8.214681e-003, -7.219102e-003, -6.111731e-003, -4.924571e-003, -3.689470e-003, -2.437509e-003,
	-1.198410e-003, -1.823349e-018, 1.132271e-003, 2.175748e-003, 3.110919e-003, 3.921678e-003,
	4.595520e-003, 5.123639e-003, 5.500961e-003, 5.726080e-003, 5.801133e-003, 5.731592e-003, 5.525997e-003,
	5.195636e-003, 4.754168e-003, 4.217217e-003, 3.601931e-003, 2.926530e-003, 2.209843e-003, 1.470852e-003,
	7.282449e-004, 1.673083e-018, -6.970049e-004, -1.347340e-003, -1.937323e-003, -2.455275e-003,
	-2.891707e-003, -3.239463e-003, -3.493793e-003, -3.652371e-003, -3.715259e-003, -3.684810e-003,
	-3.565522e-003, -3.363854e-003, -3.087991e-003, -2.747584e-003, -2.353467e-003, -1.917345e-003, -1.451488e-003,
	-9.684072e-004, -4.805503e-004, -1.475120e-018, 4.618027e-004, 8.943118e-004, 1.288098e-003,
	1.635036e-003, 1.928452e-003, 2.163235e-003, 2.335899e-003, 2.444611e-003, 2.489170e-003, 2.470957e-003,
	2.392836e-003, 2.259034e-003, 2.074983e-003, 1.847143e-003, 1.582804e-003, 1.289878e-003,
	9.766774e-004, 6.516976e-004, 3.233990e-004, 1.240827e-018, -3.107180e-004, -6.015863e-004, -8.662040e-004,
	-1.099068e-003, -1.295674e-003, -1.452595e-003, -1.567519e-003, -1.639272e-003, -1.667795e-003,
	-1.654112e-003, -1.600253e-003, -1.509173e-003, -1.384636e-003, -1.231093e-003, -1.053540e-003,
	-8.573731e-004, -6.482363e-004, -4.318696e-004, -2.139600e-004, -9.834135e-019, 2.048435e-004, 3.958472e-004,
	5.688328e-004, 7.202514e-004, 8.472480e-004, 9.477055e-004, 1.020268e-003, 1.064344e-003,
	1.080091e-003, 1.068377e-003, 1.030729e-003, 9.692701e-004, 8.866321e-004, 7.858711e-004, 6.703684e-004,
	5.437287e-004, 4.096775e-004, 2.719583e-004, 1.342350e-004, 7.170356e-019, -1.275097e-004, -2.453851e-004,
	-3.511067e-004, -4.425925e-004, -5.182326e-004, -5.769096e-004, -6.180045e-004, -6.413897e-004,
	-6.474086e-004, -6.368435e-004, -6.108732e-004, -5.710219e-004, -5.191005e-004, -4.571437e-004,
	-3.873435e-004, -3.119810e-004, -2.333599e-004, -1.537422e-004, -7.528765e-005, -4.558372e-019,
	7.032063e-005, 1.341168e-004, 1.901044e-004, 2.372934e-004, 2.749999e-004, 3.028481e-004, 3.207640e-004,
	3.289600e-004, 3.279121e-004, 3.183312e-004, 3.011276e-004, 2.773730e-004, 2.482584e-004, 2.150511e-004,
	1.790519e-004, 1.415528e-004, 1.037980e-004, 6.694782e-005, 3.204726e-005, 2.130203e-019,
	-2.845198e-005, -5.274244e-005, -7.248863e-005, -8.749262e-005, -9.773656e-005, -1.033722e-004, -1.047053e-004,
	-1.021756e-004, -9.633319e-005, -8.781233e-005, -7.730334e-005, -6.552399e-005, -5.319110e-005,
	-4.099326e-005, -2.956578e-005, -1.946843e-005, -1.116670e-005, -5.017191e-006, -1.257357e-006,
	-7.597872e-035};

const double coeffs_10000_to_1000[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.519574e-034, -1.003438e-005,
	-3.893685e-005, -8.198651e-005, -1.310480e-004, -1.756247e-004, -2.043512e-004, -2.067444e-004,
	-1.749852e-004, -1.054849e-004, 4.260406e-019, 1.338956e-004, 2.831055e-004, 4.301022e-004, 5.547460e-004,
	6.366624e-004, 6.579199e-004, 6.056962e-004, 4.745868e-004, 2.682337e-004, -9.116745e-019,
	-3.074844e-004, -6.239620e-004, -9.142875e-004, -1.142044e-003, -1.273687e-003, -1.282779e-003, -1.153819e-003,
	-8.851850e-004, -4.907702e-004, 1.434071e-018, 5.439165e-004, 1.087457e-003, 1.571742e-003,
	1.938540e-003, 2.136754e-003, 2.128689e-003, 1.895411e-003, 1.440503e-003, 7.916943e-004, -1.966827e-018,
	-8.637393e-004, -1.714746e-003, -2.462187e-003, -3.018346e-003, -3.308223e-003, -3.278543e-003,
	-2.905189e-003, -2.198135e-003, -1.203173e-003, 2.481653e-018, 1.303395e-003, 2.579756e-003,
	3.694286e-003, 4.518068e-003, 4.941914e-003, 4.889222e-003, 4.326471e-003, 3.270072e-003, 1.788624e-003,
	-2.950241e-018, -1.936814e-003, -3.834690e-003, -5.495169e-003, -6.727708e-003, -7.369619e-003,
	-7.304742e-003, -6.478926e-003, -4.910550e-003, -2.694679e-003, 3.346166e-018, 2.941704e-003, 5.853060e-003,
	8.434434e-003, 1.039127e-002, 1.146318e-002, 1.145216e-002, 1.024728e-002, 7.843357e-003,
	4.351497e-003, -3.646698e-018, -4.875017e-003, -9.849141e-003, -1.443820e-002, -1.813392e-002, -2.044394e-002,
	-2.093317e-002, -1.926298e-002, -1.522479e-002, -8.765185e-003, 3.834365e-018, 1.078420e-002,
	2.314180e-002, 3.649250e-002, 5.015686e-002, 6.340050e-002, 7.548364e-002, 8.571235e-002, 9.348739e-002,
	9.834699e-002, 1.000000e-001, 9.834699e-002, 9.348739e-002, 8.571235e-002, 7.548364e-002,
	6.340050e-002, 5.015686e-002, 3.649250e-002, 2.314180e-002, 1.078420e-002, 3.834365e-018, -8.765185e-003,
	-1.522479e-002, -1.926298e-002, -2.093317e-002, -2.044394e-002, -1.813392e-002, -1.443820e-002,
	-9.849141e-003, -4.875017e-003, -3.646698e-018, 4.351497e-003, 7.843357e-003, 1.024728e-002, 1.145216e-002,
	1.146318e-002, 1.039127e-002, 8.434434e-003, 5.853060e-003, 2.941704e-003, 3.346166e-018,
	-2.694679e-003, -4.910550e-003, -6.478926e-003, -7.304742e-003, -7.369619e-003, -6.727708e-003, -5.495169e-003,
	-3.834690e-003, -1.936814e-003, -2.950241e-018, 1.788624e-003, 3.270072e-003, 4.326471e-003,
	4.889222e-003, 4.941914e-003, 4.518068e-003, 3.694286e-003, 2.579756e-003, 1.303395e-003, 2.481653e-018,
	-1.203173e-003, -2.198135e-003, -2.905189e-003, -3.278543e-003, -3.308223e-003, -3.018346e-003,
	-2.462187e-003, -1.714746e-003, -8.637393e-004, -1.966827e-018, 7.916943e-004, 1.440503e-003,
	1.895411e-003, 2.128689e-003, 2.136754e-003, 1.938540e-003, 1.571742e-003, 1.087457e-003, 5.439165e-004,
	1.434071e-018, -4.907702e-004, -8.851850e-004, -1.153819e-003, -1.282779e-003, -1.273687e-003,
	-1.142044e-003, -9.142875e-004, -6.239620e-004, -3.074844e-004, -9.116745e-019, 2.682337e-004, 4.745868e-004,
	6.056962e-004, 6.579199e-004, 6.366624e-004, 5.547460e-004, 4.301022e-004, 2.831055e-004,
	1.338956e-004, 4.260406e-019, -1.054849e-004, -1.749852e-004, -2.067444e-004, -2.043512e-004, -1.756247e-004,
	-1.310480e-004, -8.198651e-005, -3.893685e-005, -1.003438e-005, -1.519574e-034};

void Transpose(const vector<vector<double> > &in, vector<vector<double> > &out);

MainWindow::MainWindow(QWidget *parent, const std::string &config_file): QMainWindow(parent),ui(new Ui::MainWindow)
{
	//_CrtSetDbgFlag ( _CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF ); 
	//_CrtSetReportMode( _CRT_ERROR, _CRTDBG_MODE_DEBUG ); 

	ui->setupUi(this);

	// parse startup config file
	load_config(config_file);

	// make GUI connections
	QObject::connect(ui->actionQuit, SIGNAL(triggered()), this, SLOT(close()));
	QObject::connect(ui->linkButton, SIGNAL(clicked()), this, SLOT(link()));
	QObject::connect(ui->actionLoad_Configuration, SIGNAL(triggered()), this, SLOT(load_config_dialog()));
	QObject::connect(ui->actionSave_Configuration, SIGNAL(triggered()), this, SLOT(save_config_dialog()));
	QObject::connect(ui->samplingRate, SIGNAL(currentIndexChanged(int)), this, SLOT(setMinChunk()));
}

void MainWindow::setMinChunk(){

	int idx = ui->samplingRate->currentIndex();	
	int samplingRate = sampling_rates[idx];

	switch (samplingRate) {
	case 125:
		if(ui->chunkSize->value()<80)ui->chunkSize->setValue(80);
		ui->chunkSize->setMinimum(80);
		break;
	case 250:
		if(ui->chunkSize->value()<40)ui->chunkSize->setValue(40);
		ui->chunkSize->setMinimum(40);
		break;
	case 500:
		if(ui->chunkSize->value()<20)ui->chunkSize->setValue(20);
		ui->chunkSize->setMinimum(20);
		break;
	case 1000:
		if(ui->chunkSize->value()<10)ui->chunkSize->setValue(10);
		ui->chunkSize->setMinimum(10);
		break;
	}
}

void MainWindow::load_config_dialog() {
	QString sel = QFileDialog::getOpenFileName(this,"Load Configuration File","","Configuration Files (*.cfg)");
	if (!sel.isEmpty())
		load_config(sel.toStdString());
}

void MainWindow::save_config_dialog() {
	QString sel = QFileDialog::getSaveFileName(this,"Save Configuration File","","Configuration Files (*.cfg)");
	if (!sel.isEmpty())
		save_config(sel.toStdString());
}

void MainWindow::closeEvent(QCloseEvent *ev) {
	if (reader_thread_)
		ev->ignore();
	/*else
		_CrtDumpMemoryLeaks();  */
}

void MainWindow::load_config(const std::string &filename) {
	using boost::property_tree::ptree;
	ptree pt;

	// parse file
	try {
		read_xml(filename, pt);
	} catch(std::exception &e) {
		QMessageBox::information(this,"Error",(std::string("Cannot read config file: ")+= e.what()).c_str(),QMessageBox::Ok);
		return;
	}

	// get config values
	try {
		ui->deviceNumber->setValue(pt.get<int>("settings.devicenumber",0));
		ui->channelCount->setValue(pt.get<int>("settings.channelcount",32));
		ui->chunkSize->setValue(pt.get<int>("settings.chunksize",10));
		ui->samplingRate->setCurrentIndex(pt.get<int>("settings.samplingrate",2));
		setMinChunk();
		ui->useAUX->setCheckState(pt.get<bool>("settings.useaux",false) ? Qt::Checked : Qt::Unchecked);
		ui->activeShield->setCheckState(pt.get<bool>("settings.activeshield",true) ? Qt::Checked : Qt::Unchecked);
		ui->sampledMarkers->setCheckState(pt.get<bool>("settings.sampledmarkers",true) ? Qt::Checked : Qt::Unchecked);	
		ui->sampledMarkersEEG->setCheckState(pt.get<bool>("settings.sampledmarkersEEG",false) ? Qt::Checked : Qt::Unchecked);
		ui->unsampledMarkers->setCheckState(pt.get<bool>("settings.unsampledmarkers",false) ? Qt::Checked : Qt::Unchecked);	
		ui->channelLabels->clear();
		BOOST_FOREACH(ptree::value_type &v, pt.get_child("channels.labels"))
			ui->channelLabels->appendPlainText(v.second.data().c_str());
	} catch(std::exception &) {
		QMessageBox::information(this,"Error in Config File","Could not read out config parameters.",QMessageBox::Ok);
		return;
	}
}

void MainWindow::save_config(const std::string &filename) {
	using boost::property_tree::ptree;
	ptree pt;

	// transfer UI content into property tree
	try {
		pt.put("settings.devicenumber",ui->deviceNumber->value());
		pt.put("settings.channelcount",ui->channelCount->value());
		pt.put("settings.chunksize",ui->chunkSize->value());
		pt.put("settings.samplingrate",ui->samplingRate->currentIndex());
		pt.put("settings.useaux",ui->useAUX->checkState()==Qt::Checked);
		pt.put("settings.activeshield",ui->activeShield->checkState()==Qt::Checked);
		pt.put("settings.unsampledmarkers",ui->unsampledMarkers->checkState()==Qt::Checked);
		pt.put("settings.sampledmarkers",ui->sampledMarkers->checkState()==Qt::Checked);
		pt.put("settings.sampledmarkersEEG",ui->sampledMarkersEEG->checkState()==Qt::Checked);
		std::vector<std::string> channelLabels;
		boost::algorithm::split(channelLabels,ui->channelLabels->toPlainText().toStdString(),boost::algorithm::is_any_of("\n"));
		BOOST_FOREACH(std::string &v, channelLabels)
			pt.add("channels.labels.label", v);
	} catch(std::exception &e) {
		QMessageBox::critical(this,"Error",(std::string("Could not prepare settings for saving: ")+=e.what()).c_str(),QMessageBox::Ok);
	}

	// write to disk
	try {
		write_xml(filename, pt);
	} catch(std::exception &e) {
		QMessageBox::critical(this,"Error",(std::string("Could not write to config file: ")+=e.what()).c_str(),QMessageBox::Ok);
	}
}


// start/stop the ActiChamp connection
void MainWindow::link() {
	if (reader_thread_) {
		// === perform unlink action ===
		try {
			stop_ = true;
			reader_thread_->join();
			reader_thread_.reset();
		} catch(std::exception &e) {
			QMessageBox::critical(this,"Error",(std::string("Could not stop the background processing: ")+=e.what()).c_str(),QMessageBox::Ok);
			return;
		}

		// indicate that we are now successfully unlinked
		ui->linkButton->setText("Link");
	} else {
		// === perform link action ===

		HANDLE hDevice = NULL;
		try {
			// get the UI parameters...
			int deviceNumber = ui->deviceNumber->value();
			int channelCount = ui->channelCount->value();
			int chunkSize = ui->chunkSize->value();
			int samplingRate = sampling_rates[ui->samplingRate->currentIndex()];
			bool useAUX = ui->useAUX->checkState()==Qt::Checked;
			bool activeShield = ui->activeShield->checkState()==Qt::Checked;

			g_unsampledMarkers  = ui->unsampledMarkers->checkState()==Qt::Checked;
			g_sampledMarkers    = ui->sampledMarkers->checkState()==Qt::Checked;
			g_sampledMarkersEEG = ui->sampledMarkersEEG->checkState()==Qt::Checked;

			std::vector<std::string> channelLabels;
			boost::algorithm::split(channelLabels,ui->channelLabels->toPlainText().toStdString(),boost::algorithm::is_any_of("\n"));
			if (channelLabels.size() != channelCount)
				throw std::runtime_error("The number of channels labels does not match the channel count device setting.");

			// try to verify that the requested device is available
			if (!champGetCount())
				throw std::runtime_error("According to the driver no amplifier is connected. Please make sure that the device is plugged in, turned on, battery is charged, and that the driver is installed correctly.");
			if (deviceNumber+1 > (int)champGetCount())
				throw std::runtime_error("According to the driver there are not enough devices connected for the given device number.");

			// try to open the device
			hDevice = champOpen(deviceNumber);
			if (hDevice == NULL)
				throw std::runtime_error("Could not open connection to the amplifier. Please make sure that the device is plugged in, turned on, and that the driver is installed correctly.");

			// try to get device properties
			t_champProperty properties;	
			if (champGetProperty(hDevice,&properties) != CHAMP_ERR_OK)
				throw std::runtime_error("Could not query device properties.");
			
			// confirm that the # of channels is in range
			if (channelCount > (int)(properties.CountEeg + (useAUX?properties.CountAux:0)))
				throw std::runtime_error("The number of desired channels is larger than the number of channels available on the device.");

			// try to get device module list
			t_champModules modules;	
			if (champGetModules(hDevice,&modules) != CHAMP_ERR_OK)
				throw std::runtime_error("Could not query device modules.");

			// check that the needed modules are present
			if (useAUX && !modules.Present&(1<<0))
				throw std::runtime_error("AUX channels were requested but the device reports that no AUX module is present.");
			int neededEEGchannels = channelCount - (useAUX?properties.CountAux:0);
			if (neededEEGchannels>0 && !(modules.Present&(1<<1)))
				throw std::runtime_error("EEG channels were requested but the first EEG module is not present in the device.");
			if (neededEEGchannels>32 && !(modules.Present&(1<<2)))
				throw std::runtime_error("More than 32 EEG channels were requested but the second EEG module is not present in the device.");
			if (neededEEGchannels>64 && !(modules.Present&(1<<3)))
				throw std::runtime_error("More than 64 EEG channels were requested but the third EEG module is not present in the device.");
			if (neededEEGchannels>96 && !(modules.Present&(1<<4)))
				throw std::runtime_error("More than 96 EEG channels were requested but the fourth EEG module is not present in the device.");
			if (neededEEGchannels>128 && !(modules.Present&(1<<5)))
				throw std::runtime_error("More than 128 EEG channels were requested but the fifth EEG module is not present in the device.");

			// try to enable all necessary modules
			modules.Enabled = (useAUX?1:0) | (neededEEGchannels>0?(1<<1):0) | (neededEEGchannels>32?(1<<2):0) | (neededEEGchannels>64?(1<<3):0) | (neededEEGchannels>96?(1<<4):0) | (neededEEGchannels>128?(1<<5):0);
			if (champSetModules(hDevice,&modules) != CHAMP_ERR_OK)
				throw std::runtime_error("Could not enable all present device modules.");

			// try to set device settings
			t_champSettingsEx settings;
			settings.Mode = activeShield ? CHAMP_MODE_ACTIVE_SHIELD : CHAMP_MODE_NORMAL;
			settings.Rate = samplingRate==100000 ? CHAMP_RATE_100KHZ : (samplingRate==50000 ? CHAMP_RATE_50KHZ : CHAMP_RATE_10KHZ);
			settings.AdcFilter  = CHAMP_ADC_NATIVE;
			settings.Decimation = CHAMP_DECIMATION_0;
			if (champSetSettingsEx(hDevice,&settings) != CHAMP_ERR_OK)
				throw std::runtime_error("Could not apply device settings.");

			// try to close the amp again
			if (champClose(hDevice) != CHAMP_ERR_OK)
				throw std::runtime_error("Could not close the amp.");
			hDevice = NULL;

			// start reader thread
			stop_ = false;
			reader_thread_.reset(new boost::thread(&MainWindow::read_thread,this,deviceNumber,channelCount,chunkSize,samplingRate,useAUX,activeShield,channelLabels));
		}

		catch(std::exception &e) {
			// generate error message
			std::string msg = "Could not retrieve driver error message";
			int errorcode=0; char buffer[16384];
			if (champGetError(hDevice,&errorcode,buffer,sizeof(buffer)) == CHAMP_ERR_OK)
				msg.assign(buffer);
			if (hDevice) {
				champClose(hDevice);
				hDevice = NULL;
			}
			QMessageBox::critical(this,"Error",("Could not initialize the ActiChamp interface: "+(e.what()+(" (driver message: "+msg+")"))).c_str(),QMessageBox::Ok);
			return;
		}

		// done, all successful
		ui->linkButton->setText("Unlink");
	}
}



// background data reader thread
void MainWindow::read_thread(int deviceNumber, int channelCount, int chunkSize, int samplingRate, bool useAUX, bool activeShield, std::vector<std::string> channelLabels) {
	HANDLE hDevice = NULL;
	bool started = false;
	bool _resample = false;

	// set thread priority to high in order to ensure we don't lose data during sleep periods
	int res = SetPriorityClass(GetCurrentProcess(), HIGH_PRIORITY_CLASS);

	// adjust channelCount if using aux
	int eeg_count,aux_count;
	if (useAUX) {
		eeg_count = channelCount;
		aux_count = 8;

	} else {
		eeg_count = channelCount;
		aux_count = 0;
	}

	// hand allocated items 
	lsl::stream_outlet *marker_outlet;
	lsl::stream_outlet *s_marker_outlet;
	char *recv_buffer;

	std::vector<std::vector<double> > temp_buffer(chunkSize,std::vector<double>(channelCount+(g_sampledMarkersEEG?1:0)+aux_count));
	std::vector<std::vector<double> > send_buffer(chunkSize,std::vector<double>(channelCount+(g_sampledMarkersEEG?1:0)+aux_count));
	std::vector<unsigned> trigger_buffer(chunkSize);

	std::vector<std::vector<double>> rs_temp_in,rs_temp_out;

	// containers for the marker streams
	std::vector<std::vector<std::string>> marker_buffer(chunkSize, std::vector<std::string>(1));
	std::vector<std::string> s_mrkr;
	float f_mrkr;

	// the native sampling frequency is 10KHz, using other frequencies the signals must be resampled
	if(samplingRate < 10000)
		_resample = true;
		
	std::vector<Resampler<double,double,double>*> resamplers;
	for (unsigned c=0;c<channelCount+(g_sampledMarkersEEG?1:0)+aux_count;c++) {
		switch (samplingRate) {
			case 125:
				resamplers.push_back(new Resampler<double,double,double>(1,80,coeffs_10000_to_125,sizeof(coeffs_10000_to_125)/sizeof(coeffs_10000_to_125[0])));
				break;
			case 250:
				resamplers.push_back(new Resampler<double,double,double>(1,40,coeffs_10000_to_250,sizeof(coeffs_10000_to_250)/sizeof(coeffs_10000_to_250[0])));
				break;
			case 500:
				resamplers.push_back(new Resampler<double,double,double>(1,20,coeffs_10000_to_500,sizeof(coeffs_10000_to_500)/sizeof(coeffs_10000_to_500[0])));
				break;
			case 1000:
				resamplers.push_back(new Resampler<double,double,double>(1,10,coeffs_10000_to_1000,sizeof(coeffs_10000_to_1000)/sizeof(coeffs_10000_to_1000[0])));
				break;
		}
	}

	try {
		
		// try to open the device again (we're doing everything in the same thread to not confuse the driver)
		hDevice = champOpen(deviceNumber);
		if (hDevice == NULL)
			throw std::runtime_error("Could not open connection to the amplifier. Please make sure that the device is plugged in, turned on, and that the driver is installed correctly.");
		
		// try to get version
		t_champVersion version;
		if (champGetVersion(hDevice,&version) != CHAMP_ERR_OK)
			throw std::runtime_error("Could not query device version number.");
		
		// try to get device properties
		t_champProperty properties;	
		if (champGetProperty(hDevice,&properties) != CHAMP_ERR_OK)
			throw std::runtime_error("Could not query device properties.");
		
		// determine some acquisition parameters
		float EEG_scale = properties.ResolutionEeg*1000000;
		float AUX_scale = properties.ResolutionAux*1000000;


		// try to get device module list
		t_champModules modules;	
		if (champGetModules(hDevice,&modules) != CHAMP_ERR_OK)
			throw std::runtime_error("Could not query device modules.");

		// try to enable all necessary modules
		modules.Enabled = (useAUX?1:0) | (eeg_count>0?(1<<1):0) | (eeg_count>32?(1<<2):0) | (eeg_count>64?(1<<3):0) | (eeg_count>96?(1<<4):0) | (eeg_count>128?(1<<5):0);
		if (champSetModules(hDevice,&modules) != CHAMP_ERR_OK)
			throw std::runtime_error("Could not enable all present device modules.");

		// try to set device settings
		t_champSettingsEx settings;
		settings.Mode = activeShield ? CHAMP_MODE_ACTIVE_SHIELD : CHAMP_MODE_NORMAL;
		settings.Rate = samplingRate==100000 ? CHAMP_RATE_100KHZ : (samplingRate==50000 ? CHAMP_RATE_50KHZ : CHAMP_RATE_10KHZ);
		settings.AdcFilter  = CHAMP_ADC_NATIVE;
		settings.Decimation = CHAMP_DECIMATION_0;
		if (champSetSettingsEx(hDevice,&settings) != CHAMP_ERR_OK)
			throw std::runtime_error("Could not apply device settings.");

		// try to start acquisition
		if (champStart(hDevice) != CHAMP_ERR_OK)
			throw std::runtime_error("Could not start data acquisition.");
		started = true;

		// calculate the sample size
		int sampleSize = (ceil(eeg_count/32.0)*32 + 8 + 2)*sizeof(int);

		// reserve buffers to receive and send data
		int buffer_bytes = chunkSize*sampleSize;
		recv_buffer = new char[buffer_bytes*10];

		// create data streaminfo and append some meta-data
		lsl::stream_info data_info("ActiChamp-" + boost::lexical_cast<std::string>(deviceNumber),"EEG",channelCount+(g_sampledMarkersEEG?1:0)+aux_count,samplingRate,lsl::cf_float32,"ActiChamp_" + boost::lexical_cast<std::string>(deviceNumber));
		lsl::xml_element channels = data_info.desc().append_child("channels");
		for (std::size_t k=0;k<channelLabels.size();k++)
			channels.append_child("channel")
				.append_child_value("label",channelLabels[k].c_str())
				.append_child_value("type","EEG")
				.append_child_value("unit","microvolts");
		if(g_sampledMarkersEEG)
			channels.append_child("channel")
				.append_child_value("label", "Trigger")
				.append_child_value("type","Trigger")
				.append_child_value("unit","trigger values");
		data_info.desc().append_child("acquisition")
			.append_child_value("manufacturer","Brain Products")
			.append_child_value("dll_version",boost::lexical_cast<std::string>(version.Dll).c_str())
			.append_child_value("driver_version",boost::lexical_cast<std::string>(version.Driver).c_str())
			.append_child_value("cypress_version",boost::lexical_cast<std::string>(version.Cypress).c_str())
			.append_child_value("FPGA_version",boost::lexical_cast<std::string>(version.Fpga).c_str())
			.append_child_value("msp430_version",boost::lexical_cast<std::string>(version.Msp430).c_str());
		
		// make a data outlet
		lsl::stream_outlet data_outlet(data_info);
		
		// if using markers
		if(g_unsampledMarkers) {
			lsl::stream_info marker_info("ActiChamp-" + boost::lexical_cast<std::string>(deviceNumber) + "-Markers","Markers", 1, 0, lsl::cf_string,"ActiChamp_" + boost::lexical_cast<std::string>(deviceNumber) + "_markers");
			marker_outlet = new lsl::stream_outlet(marker_info);
		}	

		if(g_sampledMarkers) {
			lsl::stream_info s_marker_info("ActiChamp-" + boost::lexical_cast<std::string>(deviceNumber) + "-Sampled-Markers","sampledMarkers", 1, (samplingRate > 1000 ? samplingRate : 10000), lsl::cf_string,"ActiChamp_" + boost::lexical_cast<std::string>(deviceNumber) + "_sampled_markers");
			s_marker_outlet = new lsl::stream_outlet(s_marker_info);
				// ditch the outlet if we don't need it (need to do it this way in order to trick C++ compiler into using this object conditionally)
		}

		// for keeping track of changes to the trigger signal
		int last_mrk = 0;
		int prev_markerSampled = 0;
		int prev_markerEEG = 0;
		
		// for the resampler
		int insamples;
		int outchannels;
		int outsamples;

		// for resizing the temporary data buffer channels
		int channs = channelCount+(g_sampledMarkersEEG?1:0)+aux_count;

		// enter transmission loop		
		int bytes_read, samples_read;
		while (!stop_) {
			// read chunk into recv_buffer
			bytes_read = champGetDataBlocking(hDevice,recv_buffer,buffer_bytes);
			samples_read = bytes_read/sampleSize;
			
			if (samples_read <= 0 && samplingRate < 50000){
				boost::this_thread::sleep(boost::posix_time::milliseconds(1));
				continue;
			}

			if (samples_read > 0) {
				
				double now = lsl::local_clock();

				// copy data into trigger_buffer and temp_buffer, and scale to microvolts
				trigger_buffer.resize(samples_read);
				temp_buffer.resize(samples_read,std::vector<double>(channelCount+(g_sampledMarkersEEG?1:0)));
				switch(sampleSize) {
					case sizeof(t_champDataModelAux):
						{
							t_champDataModelAux *data = (t_champDataModelAux*)recv_buffer;
							for (int s=0;s<samples_read;s++) {
								trigger_buffer[s] = data[s].Triggers & 0xFFFF;
								temp_buffer[s].resize(channs-eeg_count);
								for (int c=0;c<aux_count;c++)
									temp_buffer[s][c] = data[s].Aux[c] * AUX_scale;
							}
							break;
						}
					case sizeof(t_champDataModel32):
						{
							t_champDataModel32 *data = (t_champDataModel32*)recv_buffer;
							for (int s=0;s<samples_read;s++) {
								trigger_buffer[s] = data[s].Triggers & 0xFFFF;
								temp_buffer[s].resize(channs);
								for (int c=0;c<eeg_count;c++)
									temp_buffer[s][c] = data[s].Main[c] * EEG_scale;
								for (int c=0;c<aux_count;c++)
									temp_buffer[s][c+eeg_count+(g_sampledMarkersEEG?1:0)] = data[s].Aux[c] * AUX_scale;
							}
							break;
						}
					case sizeof(t_champDataModel64):
						{
							t_champDataModel64 *data = (t_champDataModel64*)recv_buffer;
							for (int s=0;s<samples_read;s++) {
								trigger_buffer[s] = data[s].Triggers & 0xFFFF;
								temp_buffer[s].resize(channs);
								for (int c=0;c<eeg_count;c++)
									temp_buffer[s][c] = data[s].Main[c] * EEG_scale;
								for (int c=0;c<aux_count;c++)
									temp_buffer[s][c+eeg_count+(g_sampledMarkersEEG?1:0)] = data[s].Aux[c] * AUX_scale;
							}
							break;
						}
					case sizeof(t_champDataModel96):
						{
							t_champDataModel96 *data = (t_champDataModel96*)recv_buffer;
							for (int s=0;s<samples_read;s++) {
								trigger_buffer[s] = data[s].Triggers & 0xFFFF;
								temp_buffer[s].resize(channs);
								for (int c=0;c<eeg_count;c++)
									temp_buffer[s][c] = data[s].Main[c] * EEG_scale;
								for (int c=0;c<aux_count;c++)
									temp_buffer[s][c+eeg_count+(g_sampledMarkersEEG?1:0)] = data[s].Aux[c] * AUX_scale;
								}
							break;
						}
					case sizeof(t_champDataModel128):
						{
							t_champDataModel128 *data = (t_champDataModel128*)recv_buffer;
							for (int s=0;s<samples_read;s++) {
								trigger_buffer[s] = data[s].Triggers & 0xFFFF;
								temp_buffer[s].resize(channs);
								for (int c=0;c<eeg_count;c++)
									temp_buffer[s][c] = data[s].Main[c] * EEG_scale;
								for (int c=0;c<aux_count;c++)
									temp_buffer[s][c+eeg_count+(g_sampledMarkersEEG?1:0)] = data[s].Aux[c] * AUX_scale;
							}
							break;
						}
					case sizeof(t_champDataModel160):
						{
							t_champDataModel160 *data = (t_champDataModel160*)recv_buffer;
							for (int s=0;s<samples_read;s++) {
								trigger_buffer[s] = data[s].Triggers & 0xFFFF;
								temp_buffer[s].resize(channs);
								for (int c=0;c<eeg_count;c++)
									temp_buffer[s][c] = data[s].Main[c] * EEG_scale;
								for (int c=0;c<aux_count;c++)
									temp_buffer[s][c+eeg_count+(g_sampledMarkersEEG?1:0)] = data[s].Aux[c] * AUX_scale;
							}
							break;
						}
				}
				
				for (int s=0;s<samples_read;s++) {
					if (g_sampledMarkersEEG) {
						f_mrkr = (trigger_buffer[s] == prev_markerEEG ? 0.0 : boost::lexical_cast<float>(trigger_buffer[s]));
						prev_markerEEG = trigger_buffer[s];
						temp_buffer[s][channelCount] = f_mrkr;
					}
			
					if (g_sampledMarkers) {
						s_mrkr.clear();
						s_mrkr.push_back(trigger_buffer[s] == prev_markerSampled ? "" : boost::lexical_cast<std::string>(trigger_buffer[s]));
						marker_buffer.at(s) = s_mrkr;
						prev_markerSampled = trigger_buffer[s];
					}
				}
				
				// optionally resample
				if (_resample) {

					insamples   = temp_buffer.size();
					outchannels = temp_buffer[0].size();
					outsamples  = resamplers[0]->neededOutCount(insamples);

					// copy to transposed input buffer _temp_in
					rs_temp_in.resize(outchannels);
					for (int c=0,e=outchannels;c<e;c++) {
						rs_temp_in[c].resize(insamples);
						for (int s=0,e=insamples;s<e;s++)
							rs_temp_in[c][s] = temp_buffer[s][c];
						
					}
					std::vector<std::vector<double>> (rs_temp_in).swap(rs_temp_in);

					// apply and store in output buffer _temp_out
					rs_temp_out.resize(outchannels);
					for (int c=0,e=outchannels;c<e;c++) {
						rs_temp_out[c].resize(outsamples);
						resamplers[c]->apply(&rs_temp_in[c][0],insamples,&rs_temp_out[c][0],outsamples);
					}
					
					// transpose back and store in out
					send_buffer.resize(outsamples);
					for (int s=0,e=outsamples;s<e;s++) {
						send_buffer[s].resize(outchannels);
						for (int c=0,e=outchannels;c<e;c++)
							send_buffer[s][c] = rs_temp_out[c][s];
					}
					
					data_outlet.push_chunk(send_buffer,now);

				} else {

					data_outlet.push_chunk(temp_buffer,now);
				}

				if(g_unsampledMarkers) {
					for (int s=0;s<samples_read;s++) {
						if (int mrk=trigger_buffer[s]) {
							if (mrk != last_mrk) {
								std::string mrk_string = boost::lexical_cast<std::string>(mrk);
								//std::cout << "          mrkr: " << now << " " << s << " " << boost::lexical_cast<std::string>(trigger_buffer[s]) << std::endl;
								marker_outlet->push_sample(&mrk_string,now + (s + 1 - samples_read)/samplingRate);
								last_mrk = mrk;
							}
						}
					}
				}
			}
		}

		
	}
	catch(boost::thread_interrupted &) {
		// thread was interrupted: no error
	}
	catch(std::exception &e) {
		// any other error
		std::cerr << e.what() << std::endl;
	}

	if (hDevice) {
		if (started)
			champStop(hDevice);
		champClose(hDevice);
		hDevice = NULL;
	}
	if(g_unsampledMarkers)delete(marker_outlet);
	if(g_sampledMarkers)delete(s_marker_outlet);
	if(recv_buffer)delete(recv_buffer);
}

MainWindow::~MainWindow() {
	delete ui;
}

